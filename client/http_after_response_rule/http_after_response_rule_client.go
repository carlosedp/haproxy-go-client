// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package http_after_response_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new http after response rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for http after response rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHTTPAfterResponseRule(params *CreateHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHTTPAfterResponseRuleCreated, *CreateHTTPAfterResponseRuleAccepted, error)

	DeleteHTTPAfterResponseRule(params *DeleteHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHTTPAfterResponseRuleAccepted, *DeleteHTTPAfterResponseRuleNoContent, error)

	GetHTTPAfterResponseRule(params *GetHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPAfterResponseRuleOK, error)

	GetHTTPAfterResponseRules(params *GetHTTPAfterResponseRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPAfterResponseRulesOK, error)

	ReplaceHTTPAfterResponseRule(params *ReplaceHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceHTTPAfterResponseRuleOK, *ReplaceHTTPAfterResponseRuleAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateHTTPAfterResponseRule adds a new HTTP after response rule

  Adds a new HTTP After Response Rule of the specified type in the specified parent.
*/
func (a *Client) CreateHTTPAfterResponseRule(params *CreateHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateHTTPAfterResponseRuleCreated, *CreateHTTPAfterResponseRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHTTPAfterResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createHTTPAfterResponseRule",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/http_after_response_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateHTTPAfterResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateHTTPAfterResponseRuleCreated:
		return value, nil, nil
	case *CreateHTTPAfterResponseRuleAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateHTTPAfterResponseRuleDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteHTTPAfterResponseRule deletes a HTTP after response rule

  Deletes a HTTP After Response Rule configuration by it's index from the specified parent.
*/
func (a *Client) DeleteHTTPAfterResponseRule(params *DeleteHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteHTTPAfterResponseRuleAccepted, *DeleteHTTPAfterResponseRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHTTPAfterResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteHTTPAfterResponseRule",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/http_after_response_rules/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHTTPAfterResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteHTTPAfterResponseRuleAccepted:
		return value, nil, nil
	case *DeleteHTTPAfterResponseRuleNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteHTTPAfterResponseRuleDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetHTTPAfterResponseRule returns one HTTP after response rule

  Returns one HTTP After Response Rule configuration by it's index in the specified parent.
*/
func (a *Client) GetHTTPAfterResponseRule(params *GetHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPAfterResponseRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHTTPAfterResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHTTPAfterResponseRule",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/http_after_response_rules/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHTTPAfterResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHTTPAfterResponseRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHTTPAfterResponseRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetHTTPAfterResponseRules returns an array of all HTTP after response rules

  Returns all HTTP After Response Rules that are configured in specified parent.
*/
func (a *Client) GetHTTPAfterResponseRules(params *GetHTTPAfterResponseRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetHTTPAfterResponseRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHTTPAfterResponseRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHTTPAfterResponseRules",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/http_after_response_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHTTPAfterResponseRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHTTPAfterResponseRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetHTTPAfterResponseRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceHTTPAfterResponseRule replaces a HTTP after response rule

  Replaces a HTTP After Response Rule configuration by it's index in the specified parent.
*/
func (a *Client) ReplaceHTTPAfterResponseRule(params *ReplaceHTTPAfterResponseRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceHTTPAfterResponseRuleOK, *ReplaceHTTPAfterResponseRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceHTTPAfterResponseRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceHTTPAfterResponseRule",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/http_after_response_rules/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceHTTPAfterResponseRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceHTTPAfterResponseRuleOK:
		return value, nil, nil
	case *ReplaceHTTPAfterResponseRuleAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceHTTPAfterResponseRuleDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
