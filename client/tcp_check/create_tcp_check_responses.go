// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package tcp_check

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/haproxytech/client-native/v4/models"
)

// CreateTCPCheckReader is a Reader for the CreateTCPCheck structure.
type CreateTCPCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTCPCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateTCPCheckCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateTCPCheckAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTCPCheckBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateTCPCheckConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateTCPCheckDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateTCPCheckCreated creates a CreateTCPCheckCreated with default headers values
func NewCreateTCPCheckCreated() *CreateTCPCheckCreated {
	return &CreateTCPCheckCreated{}
}

/* CreateTCPCheckCreated describes a response with status code 201, with default header values.

TCP check created
*/
type CreateTCPCheckCreated struct {
	Payload *models.TCPCheck
}

func (o *CreateTCPCheckCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_checks][%d] createTcpCheckCreated  %+v", 201, o.Payload)
}
func (o *CreateTCPCheckCreated) GetPayload() *models.TCPCheck {
	return o.Payload
}

func (o *CreateTCPCheckCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TCPCheck)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPCheckAccepted creates a CreateTCPCheckAccepted with default headers values
func NewCreateTCPCheckAccepted() *CreateTCPCheckAccepted {
	return &CreateTCPCheckAccepted{}
}

/* CreateTCPCheckAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateTCPCheckAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.TCPCheck
}

func (o *CreateTCPCheckAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_checks][%d] createTcpCheckAccepted  %+v", 202, o.Payload)
}
func (o *CreateTCPCheckAccepted) GetPayload() *models.TCPCheck {
	return o.Payload
}

func (o *CreateTCPCheckAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.TCPCheck)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPCheckBadRequest creates a CreateTCPCheckBadRequest with default headers values
func NewCreateTCPCheckBadRequest() *CreateTCPCheckBadRequest {
	return &CreateTCPCheckBadRequest{}
}

/* CreateTCPCheckBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateTCPCheckBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *CreateTCPCheckBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_checks][%d] createTcpCheckBadRequest  %+v", 400, o.Payload)
}
func (o *CreateTCPCheckBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateTCPCheckBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPCheckConflict creates a CreateTCPCheckConflict with default headers values
func NewCreateTCPCheckConflict() *CreateTCPCheckConflict {
	return &CreateTCPCheckConflict{}
}

/* CreateTCPCheckConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateTCPCheckConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *CreateTCPCheckConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_checks][%d] createTcpCheckConflict  %+v", 409, o.Payload)
}
func (o *CreateTCPCheckConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateTCPCheckConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPCheckDefault creates a CreateTCPCheckDefault with default headers values
func NewCreateTCPCheckDefault(code int) *CreateTCPCheckDefault {
	return &CreateTCPCheckDefault{
		_statusCode: code,
	}
}

/* CreateTCPCheckDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateTCPCheckDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the create TCP check default response
func (o *CreateTCPCheckDefault) Code() int {
	return o._statusCode
}

func (o *CreateTCPCheckDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_checks][%d] createTCPCheck default  %+v", o._statusCode, o.Payload)
}
func (o *CreateTCPCheckDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateTCPCheckDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
