// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package resolver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new resolver API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for resolver API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateResolver(params *CreateResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResolverCreated, *CreateResolverAccepted, error)

	DeleteResolver(params *DeleteResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResolverAccepted, *DeleteResolverNoContent, error)

	GetResolver(params *GetResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResolverOK, error)

	GetResolvers(params *GetResolversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResolversOK, error)

	ReplaceResolver(params *ReplaceResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceResolverOK, *ReplaceResolverAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateResolver adds a resolver

  Adds a new resolver section to the configuration file.
*/
func (a *Client) CreateResolver(params *CreateResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResolverCreated, *CreateResolverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResolverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResolver",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/resolvers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateResolverCreated:
		return value, nil, nil
	case *CreateResolverAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateResolverDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteResolver deletes a resolver

  Deletes a resolver from the configuration by it's name.
*/
func (a *Client) DeleteResolver(params *DeleteResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteResolverAccepted, *DeleteResolverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteResolverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteResolver",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/resolvers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteResolverAccepted:
		return value, nil, nil
	case *DeleteResolverNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteResolverDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetResolver returns a resolver

  Returns one resolver section configuration by it's name.
*/
func (a *Client) GetResolver(params *GetResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResolverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResolverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResolver",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/resolvers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResolverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetResolverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetResolvers returns an array of resolvers

  Returns an array of all configured resolvers.
*/
func (a *Client) GetResolvers(params *GetResolversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetResolversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResolversParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getResolvers",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/resolvers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetResolversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetResolversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetResolversDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceResolver replaces a resolver

  Replaces a resolver configuration by it's name.
*/
func (a *Client) ReplaceResolver(params *ReplaceResolverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceResolverOK, *ReplaceResolverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceResolverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceResolver",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/resolvers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceResolverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceResolverOK:
		return value, nil, nil
	case *ReplaceResolverAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceResolverDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
