// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package backend_switching_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new backend switching rule API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for backend switching rule API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateBackendSwitchingRule(params *CreateBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackendSwitchingRuleCreated, *CreateBackendSwitchingRuleAccepted, error)

	DeleteBackendSwitchingRule(params *DeleteBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackendSwitchingRuleAccepted, *DeleteBackendSwitchingRuleNoContent, error)

	GetBackendSwitchingRule(params *GetBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackendSwitchingRuleOK, error)

	GetBackendSwitchingRules(params *GetBackendSwitchingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackendSwitchingRulesOK, error)

	ReplaceBackendSwitchingRule(params *ReplaceBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceBackendSwitchingRuleOK, *ReplaceBackendSwitchingRuleAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateBackendSwitchingRule adds a new backend switching rule

  Adds a new Backend Switching Rule of the specified type in the specified frontend.
*/
func (a *Client) CreateBackendSwitchingRule(params *CreateBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateBackendSwitchingRuleCreated, *CreateBackendSwitchingRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBackendSwitchingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createBackendSwitchingRule",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/backend_switching_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBackendSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateBackendSwitchingRuleCreated:
		return value, nil, nil
	case *CreateBackendSwitchingRuleAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateBackendSwitchingRuleDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteBackendSwitchingRule deletes a backend switching rule

  Deletes a Backend Switching Rule configuration by it's index from the specified frontend.
*/
func (a *Client) DeleteBackendSwitchingRule(params *DeleteBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteBackendSwitchingRuleAccepted, *DeleteBackendSwitchingRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBackendSwitchingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteBackendSwitchingRule",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/backend_switching_rules/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBackendSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteBackendSwitchingRuleAccepted:
		return value, nil, nil
	case *DeleteBackendSwitchingRuleNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteBackendSwitchingRuleDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBackendSwitchingRule returns one backend switching rule

  Returns one Backend Switching Rule configuration by it's index in the specified frontend.
*/
func (a *Client) GetBackendSwitchingRule(params *GetBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackendSwitchingRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackendSwitchingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackendSwitchingRule",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/backend_switching_rules/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackendSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackendSwitchingRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackendSwitchingRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBackendSwitchingRules returns an array of all backend switching rules

  Returns all Backend Switching Rules that are configured in specified frontend.
*/
func (a *Client) GetBackendSwitchingRules(params *GetBackendSwitchingRulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetBackendSwitchingRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackendSwitchingRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBackendSwitchingRules",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/backend_switching_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBackendSwitchingRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBackendSwitchingRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBackendSwitchingRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceBackendSwitchingRule replaces a backend switching rule

  Replaces a Backend Switching Rule configuration by it's index in the specified frontend.
*/
func (a *Client) ReplaceBackendSwitchingRule(params *ReplaceBackendSwitchingRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceBackendSwitchingRuleOK, *ReplaceBackendSwitchingRuleAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceBackendSwitchingRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceBackendSwitchingRule",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/backend_switching_rules/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceBackendSwitchingRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceBackendSwitchingRuleOK:
		return value, nil, nil
	case *ReplaceBackendSwitchingRuleAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceBackendSwitchingRuleDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
