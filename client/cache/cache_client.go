// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package cache

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new cache API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cache API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCache(params *CreateCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCacheCreated, *CreateCacheAccepted, error)

	DeleteCache(params *DeleteCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCacheAccepted, *DeleteCacheNoContent, error)

	GetCache(params *GetCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCacheOK, error)

	GetCaches(params *GetCachesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCachesOK, error)

	ReplaceCache(params *ReplaceCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCacheOK, *ReplaceCacheAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCache adds a cache

  Adds a new cache section to the configuration file.
*/
func (a *Client) CreateCache(params *CreateCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCacheCreated, *CreateCacheAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCache",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/caches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateCacheReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateCacheCreated:
		return value, nil, nil
	case *CreateCacheAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCacheDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteCache deletes a cache

  Deletes a cache from the configuration by it's name.
*/
func (a *Client) DeleteCache(params *DeleteCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCacheAccepted, *DeleteCacheNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCache",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/caches/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCacheReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteCacheAccepted:
		return value, nil, nil
	case *DeleteCacheNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCacheDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCache returns a cache

  Returns one cache section configuration by it's name.
*/
func (a *Client) GetCache(params *GetCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCacheOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCache",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/caches/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCacheReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCacheOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCacheDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCaches returns an array of caches

  Returns an array of all configured caches.
*/
func (a *Client) GetCaches(params *GetCachesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCachesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCachesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCaches",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/caches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCachesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCachesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCachesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceCache replaces a cache

  Replaces a cache configuration by it's name.
*/
func (a *Client) ReplaceCache(params *ReplaceCacheParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCacheOK, *ReplaceCacheAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCacheParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceCache",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/caches/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceCacheReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceCacheOK:
		return value, nil, nil
	case *ReplaceCacheAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceCacheDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
