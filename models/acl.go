// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ACL ACL Lines
//
// The use of Access Control Lists (ACL) provides a flexible solution to perform
// content switching and generally to take decisions based on content extracted
// from the request, the response or any environmental status.
//
//
// swagger:model acl
type ACL struct {

	// acl name
	// Required: true
	// Pattern: ^[^\s]+$
	ACLName string `json:"acl_name"`

	// criterion
	// Required: true
	// Pattern: ^[^\s]+$
	Criterion string `json:"criterion"`

	// index
	// Required: true
	Index *int64 `json:"index"`

	// value
	// Required: true
	Value string `json:"value"`
}

// Validate validates this acl
func (m *ACL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACLName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriterion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIndex(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ACL) validateACLName(formats strfmt.Registry) error {

	if err := validate.RequiredString("acl_name", "body", m.ACLName); err != nil {
		return err
	}

	if err := validate.Pattern("acl_name", "body", m.ACLName, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ACL) validateCriterion(formats strfmt.Registry) error {

	if err := validate.RequiredString("criterion", "body", m.Criterion); err != nil {
		return err
	}

	if err := validate.Pattern("criterion", "body", m.Criterion, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ACL) validateIndex(formats strfmt.Registry) error {

	if err := validate.Required("index", "body", m.Index); err != nil {
		return err
	}

	return nil
}

func (m *ACL) validateValue(formats strfmt.Registry) error {

	if err := validate.RequiredString("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this acl based on context it is used
func (m *ACL) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ACL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ACL) UnmarshalBinary(b []byte) error {
	var res ACL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
