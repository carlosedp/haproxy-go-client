// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerTemplate Server template
//
// Set a template to initialize servers with shared parameters.
// Example: {"fqdn":"google.com","num_or_range":"1-3","port":80,"prefix":"srv"}
//
// swagger:model server_template
type ServerTemplate struct {
	ServerParams

	// fqdn
	// Required: true
	Fqdn string `json:"fqdn"`

	// id
	ID *int64 `json:"id,omitempty"`

	// num or range
	// Required: true
	NumOrRange string `json:"num_or_range"`

	// port
	// Maximum: 65535
	// Minimum: 1
	Port *int64 `json:"port,omitempty"`

	// prefix
	// Required: true
	// Pattern: ^[^\s]+$
	Prefix string `json:"prefix"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ServerTemplate) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ServerParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ServerParams = aO0

	// now for regular properties
	var propsServerTemplate struct {
		Fqdn string `json:"fqdn"`

		ID *int64 `json:"id,omitempty"`

		NumOrRange string `json:"num_or_range"`

		Port *int64 `json:"port,omitempty"`

		Prefix string `json:"prefix"`
	}
	if err := swag.ReadJSON(raw, &propsServerTemplate); err != nil {
		return err
	}
	m.Fqdn = propsServerTemplate.Fqdn

	m.ID = propsServerTemplate.ID

	m.NumOrRange = propsServerTemplate.NumOrRange

	m.Port = propsServerTemplate.Port

	m.Prefix = propsServerTemplate.Prefix

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ServerTemplate) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	aO0, err := swag.WriteJSON(m.ServerParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	// now for regular properties
	var propsServerTemplate struct {
		Fqdn string `json:"fqdn"`

		ID *int64 `json:"id,omitempty"`

		NumOrRange string `json:"num_or_range"`

		Port *int64 `json:"port,omitempty"`

		Prefix string `json:"prefix"`
	}
	propsServerTemplate.Fqdn = m.Fqdn

	propsServerTemplate.ID = m.ID

	propsServerTemplate.NumOrRange = m.NumOrRange

	propsServerTemplate.Port = m.Port

	propsServerTemplate.Prefix = m.Prefix

	jsonDataPropsServerTemplate, errServerTemplate := swag.WriteJSON(propsServerTemplate)
	if errServerTemplate != nil {
		return nil, errServerTemplate
	}
	_parts = append(_parts, jsonDataPropsServerTemplate)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this server template
func (m *ServerTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ServerParams
	if err := m.ServerParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumOrRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerTemplate) validateFqdn(formats strfmt.Registry) error {

	if err := validate.RequiredString("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateNumOrRange(formats strfmt.Registry) error {

	if err := validate.RequiredString("num_or_range", "body", m.NumOrRange); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validatePrefix(formats strfmt.Registry) error {

	if err := validate.RequiredString("prefix", "body", m.Prefix); err != nil {
		return err
	}

	if err := validate.Pattern("prefix", "body", m.Prefix, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this server template based on the context it is used
func (m *ServerTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ServerParams
	if err := m.ServerParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *ServerTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerTemplate) UnmarshalBinary(b []byte) error {
	var res ServerTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
