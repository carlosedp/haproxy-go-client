// Code generated by go-swagger; DO NOT EDIT.

// /*
// MIT License
//
// Copyright (c) 2022 Carlos Eduardo de Paula
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
// */
//
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ring Ring
//
// HAProxy ring configuration
//
// swagger:model ring
type Ring struct {

	// description
	Description string `json:"description,omitempty"`

	// format
	// Enum: [iso local raw rfc3164 rfc5424 short priority timed]
	Format string `json:"format,omitempty"`

	// maxlen
	Maxlen *int64 `json:"maxlen,omitempty"`

	// name
	// Required: true
	// Pattern: ^[A-Za-z0-9-_.:]+$
	Name string `json:"name"`

	// size
	Size *int64 `json:"size,omitempty"`

	// timeout connect
	TimeoutConnect *int64 `json:"timeout_connect,omitempty"`

	// timeout server
	TimeoutServer *int64 `json:"timeout_server,omitempty"`
}

// Validate validates this ring
func (m *Ring) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ringTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iso","local","raw","rfc3164","rfc5424","short","priority","timed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ringTypeFormatPropEnum = append(ringTypeFormatPropEnum, v)
	}
}

const (

	// RingFormatIso captures enum value "iso"
	RingFormatIso string = "iso"

	// RingFormatLocal captures enum value "local"
	RingFormatLocal string = "local"

	// RingFormatRaw captures enum value "raw"
	RingFormatRaw string = "raw"

	// RingFormatRfc3164 captures enum value "rfc3164"
	RingFormatRfc3164 string = "rfc3164"

	// RingFormatRfc5424 captures enum value "rfc5424"
	RingFormatRfc5424 string = "rfc5424"

	// RingFormatShort captures enum value "short"
	RingFormatShort string = "short"

	// RingFormatPriority captures enum value "priority"
	RingFormatPriority string = "priority"

	// RingFormatTimed captures enum value "timed"
	RingFormatTimed string = "timed"
)

// prop value enum
func (m *Ring) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ringTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Ring) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

func (m *Ring) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", m.Name, `^[A-Za-z0-9-_.:]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ring based on context it is used
func (m *Ring) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Ring) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ring) UnmarshalBinary(b []byte) error {
	var res Ring
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
